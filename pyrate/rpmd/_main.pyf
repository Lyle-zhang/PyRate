!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module get_potential__user__routines 
    interface get_potential_user_interface 
        subroutine potential(q,v,dvdq,natoms,nbeads) ! in :_main:pyrate/rpmd/_main.f90:get_potential:unknown_interface
            double precision dimension(3,natoms,nbeads),intent(in) :: q
            double precision dimension(nbeads),intent(out),depend(nbeads) :: v
            double precision dimension(3,natoms,nbeads),intent(out),depend(natoms,nbeads) :: dvdq
            integer, optional,intent(in),check(shape(q,1)==natoms),depend(q) :: natoms=shape(q,1)
            integer, optional,intent(in),check(shape(q,2)==nbeads),depend(q) :: nbeads=shape(q,2)
        end subroutine potential
    end interface get_potential_user_interface
end python module get_potential__user__routines
python module _main ! in 
    interface  ! in :_main
        subroutine compute_transmission_coefficient(beta,natoms,nbeads,dt,xi_current,geometry,mass,potential,equilibration_steps,parent_evolution_steps,child_sampling_steps,children_per_sampling,child_evolution_steps,save_parent_trajectory,save_child_trajectories,rinf,massfrac,reactant1_atoms,nreactant1_atoms,reactant2_atoms,nreactant2_atoms,nts,forming_bonds,forming_bond_lengths,number_of_forming_bonds,breaking_bonds,breaking_bond_lengths,number_of_breaking_bonds,kappa) ! in :_main:pyrate/rpmd/_main.f90
            use get_potential__user__routines
            double precision intent(in) :: beta
            integer, optional,intent(in),check(shape(geometry,1)==natoms),depend(geometry) :: natoms=shape(geometry,1)
            integer intent(in) :: nbeads
            double precision intent(in) :: dt
            double precision intent(in) :: xi_current
            double precision dimension(3,natoms),intent(in) :: geometry
            double precision dimension(natoms),intent(in),depend(natoms) :: mass
            external potential
            integer intent(in) :: equilibration_steps
            integer intent(in) :: parent_evolution_steps
            integer intent(in) :: child_sampling_steps
            integer intent(in) :: children_per_sampling
            integer intent(in) :: child_evolution_steps
            integer intent(in) :: save_parent_trajectory
            integer intent(in) :: save_child_trajectories
            double precision intent(in) :: rinf
            double precision dimension(natoms),intent(in),depend(natoms) :: massfrac
            integer dimension(nreactant1_atoms),intent(in) :: reactant1_atoms
            integer, optional,intent(in),check(len(reactant1_atoms)>=nreactant1_atoms),depend(reactant1_atoms) :: nreactant1_atoms=len(reactant1_atoms)
            integer dimension(nreactant2_atoms),intent(in) :: reactant2_atoms
            integer, optional,intent(in),check(len(reactant2_atoms)>=nreactant2_atoms),depend(reactant2_atoms) :: nreactant2_atoms=len(reactant2_atoms)
            integer, optional,intent(in),check(shape(forming_bonds,0)==nts),depend(forming_bonds) :: nts=shape(forming_bonds,0)
            integer dimension(nts,number_of_forming_bonds,2),intent(in) :: forming_bonds
            double precision dimension(nts,number_of_forming_bonds),intent(in),depend(nts,number_of_forming_bonds) :: forming_bond_lengths
            integer, optional,intent(in),check(shape(forming_bonds,1)==number_of_forming_bonds),depend(forming_bonds) :: number_of_forming_bonds=shape(forming_bonds,1)
            integer dimension(nts,number_of_breaking_bonds,2),intent(in),depend(nts) :: breaking_bonds
            double precision dimension(nts,number_of_breaking_bonds),intent(in),depend(nts,number_of_breaking_bonds) :: breaking_bond_lengths
            integer, optional,intent(in),check(shape(breaking_bonds,1)==number_of_breaking_bonds),depend(breaking_bonds) :: number_of_breaking_bonds=shape(breaking_bonds,1)
            double precision intent(out) :: kappa
        end subroutine compute_transmission_coefficient
        subroutine rpmd_evolve(p,q,beta,natoms,nbeads,dt,xi_current,mass,potential,mode,constrain,thermostat,steps,save_trajectory,rinf,massfrac,reactant1_atoms,nreactant1_atoms,reactant2_atoms,nreactant2_atoms,nts,forming_bonds,forming_bond_lengths,number_of_forming_bonds,breaking_bonds,breaking_bond_lengths,number_of_breaking_bonds) ! in :_main:pyrate/rpmd/_main.f90
            use get_potential__user__routines
            double precision dimension(3,natoms,nbeads),intent(inout) :: p
            double precision dimension(3,natoms,nbeads),intent(inout),depend(natoms,nbeads) :: q
            double precision intent(in) :: beta
            integer, optional,intent(in),check(shape(p,1)==natoms),depend(p) :: natoms=shape(p,1)
            integer, optional,intent(in),check(shape(p,2)==nbeads),depend(p) :: nbeads=shape(p,2)
            double precision intent(in) :: dt
            double precision intent(in) :: xi_current
            double precision dimension(natoms),intent(in),depend(natoms) :: mass
            external potential
            integer intent(in) :: mode
            integer intent(in) :: constrain
            integer intent(in) :: thermostat
            integer intent(in) :: steps
            integer intent(in) :: save_trajectory
            double precision intent(in) :: rinf
            double precision dimension(natoms),intent(in),depend(natoms) :: massfrac
            integer dimension(nreactant1_atoms),intent(in) :: reactant1_atoms
            integer, optional,intent(in),check(len(reactant1_atoms)>=nreactant1_atoms),depend(reactant1_atoms) :: nreactant1_atoms=len(reactant1_atoms)
            integer dimension(nreactant2_atoms),intent(in) :: reactant2_atoms
            integer, optional,intent(in),check(len(reactant2_atoms)>=nreactant2_atoms),depend(reactant2_atoms) :: nreactant2_atoms=len(reactant2_atoms)
            integer, optional,intent(in),check(shape(forming_bonds,0)==nts),depend(forming_bonds) :: nts=shape(forming_bonds,0)
            integer dimension(nts,number_of_forming_bonds,2),intent(in) :: forming_bonds
            double precision dimension(nts,number_of_forming_bonds),intent(in),depend(nts,number_of_forming_bonds) :: forming_bond_lengths
            integer, optional,intent(in),check(shape(forming_bonds,1)==number_of_forming_bonds),depend(forming_bonds) :: number_of_forming_bonds=shape(forming_bonds,1)
            integer dimension(nts,number_of_breaking_bonds,2),intent(in),depend(nts) :: breaking_bonds
            double precision dimension(nts,number_of_breaking_bonds),intent(in),depend(nts,number_of_breaking_bonds) :: breaking_bond_lengths
            integer, optional,intent(in),check(shape(breaking_bonds,1)==number_of_breaking_bonds),depend(breaking_bonds) :: number_of_breaking_bonds=shape(breaking_bonds,1)
        end subroutine rpmd_evolve
        subroutine rpmd_evolve_recrossing(p,q,beta,natoms,nbeads,dt,xi_current,mass,potential,steps,save_trajectory,rinf,massfrac,reactant1_atoms,nreactant1_atoms,reactant2_atoms,nreactant2_atoms,nts,forming_bonds,forming_bond_lengths,number_of_forming_bonds,breaking_bonds,breaking_bond_lengths,number_of_breaking_bonds,kappa_num,kappa_denom) ! in :_main:pyrate/rpmd/_main.f90
            use get_potential__user__routines
            double precision dimension(3,natoms,nbeads),intent(inout) :: p
            double precision dimension(3,natoms,nbeads),intent(inout),depend(natoms,nbeads) :: q
            double precision intent(in) :: beta
            integer, optional,intent(in),check(shape(p,1)==natoms),depend(p) :: natoms=shape(p,1)
            integer, optional,intent(in),check(shape(p,2)==nbeads),depend(p) :: nbeads=shape(p,2)
            double precision intent(in) :: dt
            double precision intent(in) :: xi_current
            double precision dimension(natoms),intent(in),depend(natoms) :: mass
            external potential
            integer, optional,intent(in),check(len(kappa_num)>=steps),depend(kappa_num) :: steps=len(kappa_num)
            integer intent(in) :: save_trajectory
            double precision intent(in) :: rinf
            double precision dimension(natoms),intent(in),depend(natoms) :: massfrac
            integer dimension(nreactant1_atoms),intent(in) :: reactant1_atoms
            integer, optional,intent(in),check(len(reactant1_atoms)>=nreactant1_atoms),depend(reactant1_atoms) :: nreactant1_atoms=len(reactant1_atoms)
            integer dimension(nreactant2_atoms),intent(in) :: reactant2_atoms
            integer, optional,intent(in),check(len(reactant2_atoms)>=nreactant2_atoms),depend(reactant2_atoms) :: nreactant2_atoms=len(reactant2_atoms)
            integer, optional,intent(in),check(shape(forming_bonds,0)==nts),depend(forming_bonds) :: nts=shape(forming_bonds,0)
            integer dimension(nts,number_of_forming_bonds,2),intent(in) :: forming_bonds
            double precision dimension(nts,number_of_forming_bonds),intent(in),depend(nts,number_of_forming_bonds) :: forming_bond_lengths
            integer, optional,intent(in),check(shape(forming_bonds,1)==number_of_forming_bonds),depend(forming_bonds) :: number_of_forming_bonds=shape(forming_bonds,1)
            integer dimension(nts,number_of_breaking_bonds,2),intent(in),depend(nts) :: breaking_bonds
            double precision dimension(nts,number_of_breaking_bonds),intent(in),depend(nts,number_of_breaking_bonds) :: breaking_bond_lengths
            integer, optional,intent(in),check(shape(breaking_bonds,1)==number_of_breaking_bonds),depend(breaking_bonds) :: number_of_breaking_bonds=shape(breaking_bonds,1)
            double precision dimension(steps),intent(inout) :: kappa_num
            double precision intent(inout) :: kappa_denom
        end subroutine rpmd_evolve_recrossing
        subroutine evolve(p,q,v,dvdq,xi,dxi,d2xi,natoms,nbeads,constrain,beta,dt,mass,potential,rinf,massfrac,reactant1_atoms,nreactant1_atoms,reactant2_atoms,nreactant2_atoms,nts,forming_bonds,forming_bond_lengths,number_of_forming_bonds,breaking_bonds,breaking_bond_lengths,number_of_breaking_bonds,xi_current,mode) ! in :_main:pyrate/rpmd/_main.f90
            use get_potential__user__routines
            double precision dimension(3,natoms,nbeads),intent(inout) :: p
            double precision dimension(3,natoms,nbeads),intent(inout),depend(natoms,nbeads) :: q
            double precision dimension(nbeads),intent(inout),depend(nbeads) :: v
            double precision dimension(3,natoms,nbeads),intent(inout),depend(natoms,nbeads) :: dvdq
            double precision intent(inout) :: xi
            double precision dimension(3,natoms),intent(inout),depend(natoms) :: dxi
            double precision dimension(3,natoms,3,natoms),intent(inout),depend(natoms,natoms) :: d2xi
            integer, optional,intent(in),check(shape(p,1)==natoms),depend(p) :: natoms=shape(p,1)
            integer, optional,intent(in),check(shape(p,2)==nbeads),depend(p) :: nbeads=shape(p,2)
            integer intent(in) :: constrain
            double precision intent(in) :: beta
            double precision intent(in) :: dt
            double precision dimension(natoms),intent(in),depend(natoms) :: mass
            external potential
            double precision intent(in) :: rinf
            double precision dimension(natoms),intent(in),depend(natoms) :: massfrac
            integer dimension(nreactant1_atoms),intent(in) :: reactant1_atoms
            integer, optional,intent(in),check(len(reactant1_atoms)>=nreactant1_atoms),depend(reactant1_atoms) :: nreactant1_atoms=len(reactant1_atoms)
            integer dimension(nreactant2_atoms),intent(in) :: reactant2_atoms
            integer, optional,intent(in),check(len(reactant2_atoms)>=nreactant2_atoms),depend(reactant2_atoms) :: nreactant2_atoms=len(reactant2_atoms)
            integer, optional,intent(in),check(shape(forming_bonds,0)==nts),depend(forming_bonds) :: nts=shape(forming_bonds,0)
            integer dimension(nts,number_of_forming_bonds,2),intent(in) :: forming_bonds
            double precision dimension(nts,number_of_forming_bonds),intent(in),depend(nts,number_of_forming_bonds) :: forming_bond_lengths
            integer, optional,intent(in),check(shape(forming_bonds,1)==number_of_forming_bonds),depend(forming_bonds) :: number_of_forming_bonds=shape(forming_bonds,1)
            integer dimension(nts,number_of_breaking_bonds,2),intent(in),depend(nts) :: breaking_bonds
            double precision dimension(nts,number_of_breaking_bonds),intent(in),depend(nts,number_of_breaking_bonds) :: breaking_bond_lengths
            integer, optional,intent(in),check(shape(breaking_bonds,1)==number_of_breaking_bonds),depend(breaking_bonds) :: number_of_breaking_bonds=shape(breaking_bonds,1)
            double precision intent(in) :: xi_current
            integer intent(in) :: mode
        end subroutine evolve
        subroutine evolve_free_ring_polymer(p,q,beta,dt,mass,natoms,nbeads) ! in :_main:pyrate/rpmd/_main.f90
            double precision dimension(3,natoms,nbeads),intent(inout) :: p
            double precision dimension(3,natoms,nbeads),intent(inout),depend(natoms,nbeads) :: q
            double precision intent(in) :: beta
            double precision intent(in) :: dt
            double precision dimension(natoms),intent(in),depend(natoms) :: mass
            integer, optional,intent(in),check(shape(p,1)==natoms),depend(p) :: natoms=shape(p,1)
            integer, optional,intent(in),check(shape(p,2)==nbeads),depend(p) :: nbeads=shape(p,2)
        end subroutine evolve_free_ring_polymer
        subroutine constrain_to_dividing_surface(p,q,dxi,mass,dt,natoms,nbeads,rinf,massfrac,reactant1_atoms,nreactant1_atoms,reactant2_atoms,nreactant2_atoms,nts,forming_bonds,forming_bond_lengths,number_of_forming_bonds,breaking_bonds,breaking_bond_lengths,number_of_breaking_bonds,xi_current,mode) ! in :_main:pyrate/rpmd/_main.f90
            double precision dimension(3,natoms,nbeads),intent(inout) :: p
            double precision dimension(3,natoms,nbeads),intent(inout),depend(natoms,nbeads) :: q
            double precision dimension(3,natoms),intent(in),depend(natoms) :: dxi
            double precision dimension(natoms),intent(in),depend(natoms) :: mass
            double precision intent(in) :: dt
            integer, optional,intent(in),check(shape(p,1)==natoms),depend(p) :: natoms=shape(p,1)
            integer, optional,intent(in),check(shape(p,2)==nbeads),depend(p) :: nbeads=shape(p,2)
            double precision intent(in) :: rinf
            double precision dimension(natoms),intent(in),depend(natoms) :: massfrac
            integer dimension(nreactant1_atoms),intent(in) :: reactant1_atoms
            integer, optional,intent(in),check(len(reactant1_atoms)>=nreactant1_atoms),depend(reactant1_atoms) :: nreactant1_atoms=len(reactant1_atoms)
            integer dimension(nreactant2_atoms),intent(in) :: reactant2_atoms
            integer, optional,intent(in),check(len(reactant2_atoms)>=nreactant2_atoms),depend(reactant2_atoms) :: nreactant2_atoms=len(reactant2_atoms)
            integer, optional,intent(in),check(shape(forming_bonds,0)==nts),depend(forming_bonds) :: nts=shape(forming_bonds,0)
            integer dimension(nts,number_of_forming_bonds,2),intent(in) :: forming_bonds
            double precision dimension(nts,number_of_forming_bonds),intent(in),depend(nts,number_of_forming_bonds) :: forming_bond_lengths
            integer, optional,intent(in),check(shape(forming_bonds,1)==number_of_forming_bonds),depend(forming_bonds) :: number_of_forming_bonds=shape(forming_bonds,1)
            integer dimension(nts,number_of_breaking_bonds,2),intent(in),depend(nts) :: breaking_bonds
            double precision dimension(nts,number_of_breaking_bonds),intent(in),depend(nts,number_of_breaking_bonds) :: breaking_bond_lengths
            integer, optional,intent(in),check(shape(breaking_bonds,1)==number_of_breaking_bonds),depend(breaking_bonds) :: number_of_breaking_bonds=shape(breaking_bonds,1)
            double precision intent(in) :: xi_current
            integer intent(in) :: mode
        end subroutine constrain_to_dividing_surface
        subroutine constrain_momentum_to_dividing_surface(p,mass,dxi,natoms,nbeads) ! in :_main:pyrate/rpmd/_main.f90
            double precision dimension(3,natoms,nbeads),intent(inout) :: p
            double precision dimension(natoms),intent(in),depend(natoms) :: mass
            double precision dimension(3,natoms),intent(in),depend(natoms) :: dxi
            integer, optional,intent(in),check(shape(p,1)==natoms),depend(p) :: natoms=shape(p,1)
            integer, optional,intent(in),check(shape(p,2)==nbeads),depend(p) :: nbeads=shape(p,2)
        end subroutine constrain_momentum_to_dividing_surface
        subroutine get_reaction_coordinate(centroid,xi,dxi,d2xi,natoms,rinf,massfrac,reactant1_atoms,nreactant1_atoms,reactant2_atoms,nreactant2_atoms,nts,forming_bonds,forming_bond_lengths,number_of_forming_bonds,breaking_bonds,breaking_bond_lengths,number_of_breaking_bonds,xi_current,mode) ! in :_main:pyrate/rpmd/_main.f90
            double precision dimension(3,natoms),intent(in) :: centroid
            double precision intent(out) :: xi
            double precision dimension(3,natoms),intent(out),depend(natoms) :: dxi
            double precision dimension(3,natoms,3,natoms),intent(out),depend(natoms,natoms) :: d2xi
            integer, optional,intent(in),check(shape(centroid,1)==natoms),depend(centroid) :: natoms=shape(centroid,1)
            double precision intent(in) :: rinf
            double precision dimension(natoms),intent(in),depend(natoms) :: massfrac
            integer dimension(nreactant1_atoms),intent(in) :: reactant1_atoms
            integer, optional,intent(in),check(len(reactant1_atoms)>=nreactant1_atoms),depend(reactant1_atoms) :: nreactant1_atoms=len(reactant1_atoms)
            integer dimension(nreactant2_atoms),intent(in) :: reactant2_atoms
            integer, optional,intent(in),check(len(reactant2_atoms)>=nreactant2_atoms),depend(reactant2_atoms) :: nreactant2_atoms=len(reactant2_atoms)
            integer, optional,intent(in),check(shape(forming_bonds,0)==nts),depend(forming_bonds) :: nts=shape(forming_bonds,0)
            integer dimension(nts,number_of_forming_bonds,2),intent(in) :: forming_bonds
            double precision dimension(nts,number_of_forming_bonds),intent(in),depend(nts,number_of_forming_bonds) :: forming_bond_lengths
            integer, optional,intent(in),check(shape(forming_bonds,1)==number_of_forming_bonds),depend(forming_bonds) :: number_of_forming_bonds=shape(forming_bonds,1)
            integer dimension(nts,number_of_breaking_bonds,2),intent(in),depend(nts) :: breaking_bonds
            double precision dimension(nts,number_of_breaking_bonds),intent(in),depend(nts,number_of_breaking_bonds) :: breaking_bond_lengths
            integer, optional,intent(in),check(shape(breaking_bonds,1)==number_of_breaking_bonds),depend(breaking_bonds) :: number_of_breaking_bonds=shape(breaking_bonds,1)
            double precision intent(in) :: xi_current
            integer intent(in) :: mode
        end subroutine get_reaction_coordinate
        subroutine get_potential(q,xi,dxi,d2xi,v,dvdq,natoms,nbeads,potential) ! in :_main:pyrate/rpmd/_main.f90
            use get_potential__user__routines
            double precision dimension(3,natoms,nbeads),intent(in) :: q
            double precision intent(in) :: xi
            double precision dimension(3,natoms),intent(in),depend(natoms) :: dxi
            double precision dimension(3,natoms,3,natoms),intent(in),depend(natoms,natoms) :: d2xi
            double precision dimension(nbeads),intent(out),depend(nbeads) :: v
            double precision dimension(3,natoms,nbeads),intent(out),depend(natoms,nbeads) :: dvdq
            integer, optional,intent(in),check(shape(q,1)==natoms),depend(q) :: natoms=shape(q,1)
            integer, optional,intent(in),check(shape(q,2)==nbeads),depend(q) :: nbeads=shape(q,2)
            external potential
        end subroutine get_potential
        subroutine get_recrossing_flux(mass,dxi,beta,natoms,fs) ! in :_main:pyrate/rpmd/_main.f90
            double precision dimension(natoms),intent(in) :: mass
            double precision dimension(3,natoms),intent(in),depend(natoms) :: dxi
            double precision intent(in) :: beta
            integer, optional,intent(in),check(len(mass)>=natoms),depend(mass) :: natoms=len(mass)
            double precision intent(out) :: fs
        end subroutine get_recrossing_flux
        subroutine get_recrossing_velocity(p,mass,dxi,natoms,nbeads,vs) ! in :_main:pyrate/rpmd/_main.f90
            double precision dimension(3,natoms,nbeads),intent(in) :: p
            double precision dimension(natoms),intent(in),depend(natoms) :: mass
            double precision dimension(3,natoms),intent(in),depend(natoms) :: dxi
            integer, optional,intent(in),check(shape(p,1)==natoms),depend(p) :: natoms=shape(p,1)
            integer, optional,intent(in),check(shape(p,2)==nbeads),depend(p) :: nbeads=shape(p,2)
            double precision intent(out) :: vs
        end subroutine get_recrossing_velocity
        subroutine sample_momentum(p,mass,beta,natoms,nbeads) ! in :_main:pyrate/rpmd/_main.f90
            double precision dimension(3,natoms,nbeads),intent(out),depend(natoms,nbeads) :: p
            double precision dimension(natoms),intent(in) :: mass
            double precision intent(in) :: beta
            integer, optional,intent(in),check(len(mass)>=natoms),depend(mass) :: natoms=len(mass)
            integer intent(in) :: nbeads
        end subroutine sample_momentum
        subroutine get_ring_polymer_energy(q,mass,beta,natoms,nbeads,ering) ! in :_main:pyrate/rpmd/_main.f90
            double precision dimension(3,natoms,nbeads),intent(in) :: q
            double precision dimension(natoms),intent(in),depend(natoms) :: mass
            double precision intent(in) :: beta
            integer, optional,intent(in),check(shape(q,1)==natoms),depend(q) :: natoms=shape(q,1)
            integer, optional,intent(in),check(shape(q,2)==nbeads),depend(q) :: nbeads=shape(q,2)
            double precision intent(out) :: ering
        end subroutine get_ring_polymer_energy
        subroutine get_kinetic_energy(p,mass,natoms,nbeads,ek) ! in :_main:pyrate/rpmd/_main.f90
            double precision dimension(3,natoms,nbeads),intent(in) :: p
            double precision dimension(natoms),intent(in),depend(natoms) :: mass
            integer, optional,intent(in),check(shape(p,1)==natoms),depend(p) :: natoms=shape(p,1)
            integer, optional,intent(in),check(shape(p,2)==nbeads),depend(p) :: nbeads=shape(p,2)
            double precision intent(out) :: ek
        end subroutine get_kinetic_energy
        subroutine get_center_of_mass(q,mass,natoms,nbeads,cm) ! in :_main:pyrate/rpmd/_main.f90
            double precision dimension(3,natoms,nbeads),intent(in) :: q
            double precision dimension(natoms),intent(in),depend(natoms) :: mass
            integer, optional,intent(in),check(shape(q,1)==natoms),depend(q) :: natoms=shape(q,1)
            integer, optional,intent(in),check(shape(q,2)==nbeads),depend(q) :: nbeads=shape(q,2)
            double precision dimension(3),intent(out) :: cm
        end subroutine get_center_of_mass
        subroutine get_centroid(q,natoms,nbeads,centroid) ! in :_main:pyrate/rpmd/_main.f90
            double precision dimension(3,natoms,nbeads),intent(in) :: q
            integer, optional,intent(in),check(shape(q,1)==natoms),depend(q) :: natoms=shape(q,1)
            integer, optional,intent(in),check(shape(q,2)==nbeads),depend(q) :: nbeads=shape(q,2)
            double precision dimension(3,natoms),intent(out),depend(natoms) :: centroid
        end subroutine get_centroid
        subroutine get_radius_of_gyration(q,natoms,nbeads,r) ! in :_main:pyrate/rpmd/_main.f90
            double precision dimension(3,natoms,nbeads),intent(in) :: q
            integer, optional,intent(in),check(shape(q,1)==natoms),depend(q) :: natoms=shape(q,1)
            integer, optional,intent(in),check(shape(q,2)==nbeads),depend(q) :: nbeads=shape(q,2)
            double precision dimension(natoms),intent(out),depend(natoms) :: r
        end subroutine get_radius_of_gyration
        subroutine update_vmd_output(q,natoms,nbeads,beads_file_number,centroid_file_number) ! in :_main:pyrate/rpmd/_main.f90
            double precision dimension(3,natoms,nbeads),intent(in) :: q
            integer, optional,intent(in),check(shape(q,1)==natoms),depend(q) :: natoms=shape(q,1)
            integer, optional,intent(in),check(shape(q,2)==nbeads),depend(q) :: nbeads=shape(q,2)
            integer intent(in) :: beads_file_number
            integer intent(in) :: centroid_file_number
        end subroutine update_vmd_output
        subroutine random_init ! in :_main:pyrate/rpmd/_main.f90
        end subroutine random_init
        subroutine random(rn) ! in :_main:pyrate/rpmd/_main.f90
            double precision intent(out) :: rn
        end subroutine random
        subroutine randomn(rn) ! in :_main:pyrate/rpmd/_main.f90
            double precision intent(out) :: rn
        end subroutine randomn
        subroutine rfft(x,n) ! in :_main:pyrate/rpmd/_main.f90
            double precision dimension(n),intent(inout) :: x
            integer, optional,intent(in),check(len(x)>=n),depend(x) :: n=len(x)
        end subroutine rfft
        subroutine irfft(x,n) ! in :_main:pyrate/rpmd/_main.f90
            double precision dimension(n),intent(inout) :: x
            integer, optional,intent(in),check(len(x)>=n),depend(x) :: n=len(x)
        end subroutine irfft
    end interface 
end python module _main

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
